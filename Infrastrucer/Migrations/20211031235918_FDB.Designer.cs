// <auto-generated />
using System;
using Infrastrucer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastrucer.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211031235918_FDB")]
    partial class FDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("BisnicityApp.Entites.ApplayJob", b =>
                {
                    b.Property<int>("ApplayJobID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("JobVacancyID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserbusID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplayJobID");

                    b.HasIndex("JobVacancyID");

                    b.ToTable("ApplayJob");
                });

            modelBuilder.Entity("BisnicityApp.Entites.CareerPath", b =>
                {
                    b.Property<int>("CareerPathID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("NameCareer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CareerPathID");

                    b.ToTable("CareerPath");
                });

            modelBuilder.Entity("BisnicityApp.Entites.CatPerson", b =>
                {
                    b.Property<int>("CatPersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CatPersonID");

                    b.ToTable("CatPerson");
                });

            modelBuilder.Entity("BisnicityApp.Entites.CatTemp", b =>
                {
                    b.Property<int>("CatTempID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CatTempID");

                    b.ToTable("CatTemp");
                });

            modelBuilder.Entity("BisnicityApp.Entites.ContactUs", b =>
                {
                    b.Property<int>("ContactUsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Messsage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactUsID");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("BisnicityApp.Entites.DataPerson", b =>
                {
                    b.Property<int>("DataPersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("EducationlevelID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnivircityID")
                        .HasColumnType("int");

                    b.Property<string>("phoneeNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DataPersonID");

                    b.HasIndex("EducationlevelID");

                    b.HasIndex("GenderID");

                    b.HasIndex("UnivircityID");

                    b.ToTable("DataPerson");
                });

            modelBuilder.Entity("BisnicityApp.Entites.Datavocational", b =>
                {
                    b.Property<int>("DatavocationalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CareerPathID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("yourstatusID")
                        .HasColumnType("int");

                    b.HasKey("DatavocationalID");

                    b.HasIndex("CareerPathID");

                    b.HasIndex("GenderID");

                    b.HasIndex("yourstatusID");

                    b.ToTable("Datavocational");
                });

            modelBuilder.Entity("BisnicityApp.Entites.DetailsPerson", b =>
                {
                    b.Property<int>("DetailsPersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AboutImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutUs")
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<int?>("CatPersonID")
                        .HasColumnType("int");

                    b.Property<string>("Expirence")
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("Facebooklink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Whatslink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DetailsPersonID");

                    b.HasIndex("CatPersonID");

                    b.ToTable("DetailsPerson");
                });

            modelBuilder.Entity("BisnicityApp.Entites.Educationlevel", b =>
                {
                    b.Property<int>("EducationlevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("levelName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EducationlevelID");

                    b.ToTable("Educationlevel");
                });

            modelBuilder.Entity("BisnicityApp.Entites.Gender", b =>
                {
                    b.Property<int>("GenderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("GenderName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderID");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("BisnicityApp.Entites.Idea", b =>
                {
                    b.Property<int>("IdeaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fileidea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeIdeaID")
                        .HasColumnType("int");

                    b.Property<string>("descreption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ideaname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneno")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdeaID");

                    b.HasIndex("TypeIdeaID");

                    b.ToTable("Idea");
                });

            modelBuilder.Entity("BisnicityApp.Entites.Info", b =>
                {
                    b.Property<int>("InfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Flag")
                        .HasColumnType("int");

                    b.Property<string>("ImageProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Linklinkedin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InfoID");

                    b.ToTable("Info");
                });

            modelBuilder.Entity("BisnicityApp.Entites.Invistor", b =>
                {
                    b.Property<int>("InvistorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Flag")
                        .HasColumnType("int");

                    b.Property<int?>("TargetsectorID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvistorID");

                    b.HasIndex("TargetsectorID");

                    b.ToTable("Invistor");
                });

            modelBuilder.Entity("BisnicityApp.Entites.OurServices", b =>
                {
                    b.Property<int>("OurServicesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AboutUs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AbuotServ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyNo")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DomainName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleMapLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InfoID")
                        .HasColumnType("int");

                    b.Property<string>("LinkFace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkInsta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkTwet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkWats")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OurServicesID");

                    b.HasIndex("InfoID");

                    b.ToTable("OurServices");
                });

            modelBuilder.Entity("BisnicityApp.Entites.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cvpdf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EducationlevelID")
                        .HasColumnType("int");

                    b.Property<int>("Flag")
                        .HasColumnType("int");

                    b.Property<string>("GPA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedInLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnivircityID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonID");

                    b.HasIndex("EducationlevelID");

                    b.HasIndex("UnivircityID");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("BisnicityApp.Entites.PostCompany", b =>
                {
                    b.Property<int>("PostCompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DetailsPost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitelePost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostCompanyID");

                    b.ToTable("PostCompany");
                });

            modelBuilder.Entity("BisnicityApp.Entites.Services", b =>
                {
                    b.Property<int>("ServicesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InfoID")
                        .HasColumnType("int");

                    b.Property<string>("Servicename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("paragraph")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServicesID");

                    b.HasIndex("InfoID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("BisnicityApp.Entites.SkillsPerson", b =>
                {
                    b.Property<int>("SkillsPersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Courses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillsPersonID");

                    b.ToTable("SkillsPerson");
                });

            modelBuilder.Entity("BisnicityApp.Entites.SupportedIdeas", b =>
                {
                    b.Property<int>("SupportedIdeasID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("IdeaID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupportedIdeasID");

                    b.HasIndex("IdeaID");

                    b.ToTable("SupportedIdeas");
                });

            modelBuilder.Entity("BisnicityApp.Entites.SuppourtIdea", b =>
                {
                    b.Property<int>("SuppourtIdeaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Careerslicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificateofRegistration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Commercialrecord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Flag")
                        .HasColumnType("int");

                    b.Property<int?>("TargetsectorID")
                        .HasColumnType("int");

                    b.Property<int?>("TypeCompanyID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SuppourtIdeaID");

                    b.HasIndex("TargetsectorID");

                    b.HasIndex("TypeCompanyID");

                    b.ToTable("SuppourtIdea");
                });

            modelBuilder.Entity("BisnicityApp.Entites.Targetsector", b =>
                {
                    b.Property<int>("TargetsectorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("namesector")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TargetsectorID");

                    b.ToTable("Targetsector");
                });

            modelBuilder.Entity("BisnicityApp.Entites.Templete", b =>
                {
                    b.Property<int>("TempleteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BackgroundTemp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CatTempID")
                        .HasColumnType("int");

                    b.Property<string>("ChoesePrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoTemp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempleteID");

                    b.HasIndex("CatTempID");

                    b.ToTable("Templete");
                });

            modelBuilder.Entity("BisnicityApp.Entites.TypeCompany", b =>
                {
                    b.Property<int>("TypeCompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Typename")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeCompanyID");

                    b.ToTable("TypeCompany");
                });

            modelBuilder.Entity("BisnicityApp.Entites.TypeIdea", b =>
                {
                    b.Property<int>("TypeIdeaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("NameType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeIdeaID");

                    b.ToTable("TypeIdea");
                });

            modelBuilder.Entity("BisnicityApp.Entites.Univircity", b =>
                {
                    b.Property<int>("UnivircityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("UniName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnivircityID");

                    b.ToTable("Univircity");
                });

            modelBuilder.Entity("BisnicityApp.Entites.coach", b =>
                {
                    b.Property<int>("coachID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EducationlevelID")
                        .HasColumnType("int");

                    b.Property<string>("Expireance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Flag")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnivircityID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("certificte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("coachID");

                    b.HasIndex("EducationlevelID");

                    b.HasIndex("UnivircityID");

                    b.ToTable("coach");
                });

            modelBuilder.Entity("BisnicityApp.Entites.jobVacancy", b =>
                {
                    b.Property<int>("jobVacancyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pathpdf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("Salary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("jobVacancyID");

                    b.ToTable("jobVacancy");
                });

            modelBuilder.Entity("BisnicityApp.Entites.volunteer", b =>
                {
                    b.Property<int>("volunteerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descrption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderID")
                        .HasColumnType("int");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("volunteerID");

                    b.HasIndex("GenderID");

                    b.ToTable("Volunteer");
                });

            modelBuilder.Entity("BisnicityApp.Entites.yourstatus", b =>
                {
                    b.Property<int>("yourstatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("NameStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("yourstatusID");

                    b.ToTable("yourstatus");
                });

            modelBuilder.Entity("Infrastrucer.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("GenderID")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("sFirstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sLastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenderID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BisnicityApp.Entites.ApplayJob", b =>
                {
                    b.HasOne("BisnicityApp.Entites.jobVacancy", "JobVacancy")
                        .WithMany()
                        .HasForeignKey("JobVacancyID");

                    b.Navigation("JobVacancy");
                });

            modelBuilder.Entity("BisnicityApp.Entites.DataPerson", b =>
                {
                    b.HasOne("BisnicityApp.Entites.Educationlevel", "Educationlevel")
                        .WithMany()
                        .HasForeignKey("EducationlevelID");

                    b.HasOne("BisnicityApp.Entites.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderID");

                    b.HasOne("BisnicityApp.Entites.Univircity", "Univircity")
                        .WithMany()
                        .HasForeignKey("UnivircityID");

                    b.Navigation("Educationlevel");

                    b.Navigation("Gender");

                    b.Navigation("Univircity");
                });

            modelBuilder.Entity("BisnicityApp.Entites.Datavocational", b =>
                {
                    b.HasOne("BisnicityApp.Entites.CareerPath", "CareerPath")
                        .WithMany()
                        .HasForeignKey("CareerPathID");

                    b.HasOne("BisnicityApp.Entites.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderID");

                    b.HasOne("BisnicityApp.Entites.yourstatus", "yourstatus")
                        .WithMany()
                        .HasForeignKey("yourstatusID");

                    b.Navigation("CareerPath");

                    b.Navigation("Gender");

                    b.Navigation("yourstatus");
                });

            modelBuilder.Entity("BisnicityApp.Entites.DetailsPerson", b =>
                {
                    b.HasOne("BisnicityApp.Entites.CatPerson", "CatPerson")
                        .WithMany()
                        .HasForeignKey("CatPersonID");

                    b.Navigation("CatPerson");
                });

            modelBuilder.Entity("BisnicityApp.Entites.Idea", b =>
                {
                    b.HasOne("BisnicityApp.Entites.TypeIdea", "TypeIdea")
                        .WithMany()
                        .HasForeignKey("TypeIdeaID");

                    b.Navigation("TypeIdea");
                });

            modelBuilder.Entity("BisnicityApp.Entites.Invistor", b =>
                {
                    b.HasOne("BisnicityApp.Entites.Targetsector", "Targetsector")
                        .WithMany()
                        .HasForeignKey("TargetsectorID");

                    b.Navigation("Targetsector");
                });

            modelBuilder.Entity("BisnicityApp.Entites.OurServices", b =>
                {
                    b.HasOne("BisnicityApp.Entites.Info", "Info")
                        .WithMany()
                        .HasForeignKey("InfoID");

                    b.Navigation("Info");
                });

            modelBuilder.Entity("BisnicityApp.Entites.Person", b =>
                {
                    b.HasOne("BisnicityApp.Entites.Educationlevel", "Educationlevel")
                        .WithMany()
                        .HasForeignKey("EducationlevelID");

                    b.HasOne("BisnicityApp.Entites.Univircity", "Univircity")
                        .WithMany()
                        .HasForeignKey("UnivircityID");

                    b.Navigation("Educationlevel");

                    b.Navigation("Univircity");
                });

            modelBuilder.Entity("BisnicityApp.Entites.Services", b =>
                {
                    b.HasOne("BisnicityApp.Entites.Info", "Info")
                        .WithMany()
                        .HasForeignKey("InfoID");

                    b.Navigation("Info");
                });

            modelBuilder.Entity("BisnicityApp.Entites.SupportedIdeas", b =>
                {
                    b.HasOne("BisnicityApp.Entites.Idea", "Idea")
                        .WithMany()
                        .HasForeignKey("IdeaID");

                    b.Navigation("Idea");
                });

            modelBuilder.Entity("BisnicityApp.Entites.SuppourtIdea", b =>
                {
                    b.HasOne("BisnicityApp.Entites.Targetsector", "Targetsector")
                        .WithMany()
                        .HasForeignKey("TargetsectorID");

                    b.HasOne("BisnicityApp.Entites.TypeCompany", "TypeCompany")
                        .WithMany()
                        .HasForeignKey("TypeCompanyID");

                    b.Navigation("Targetsector");

                    b.Navigation("TypeCompany");
                });

            modelBuilder.Entity("BisnicityApp.Entites.Templete", b =>
                {
                    b.HasOne("BisnicityApp.Entites.CatTemp", "CatTemp")
                        .WithMany()
                        .HasForeignKey("CatTempID");

                    b.Navigation("CatTemp");
                });

            modelBuilder.Entity("BisnicityApp.Entites.coach", b =>
                {
                    b.HasOne("BisnicityApp.Entites.Educationlevel", "Educationlevel")
                        .WithMany()
                        .HasForeignKey("EducationlevelID");

                    b.HasOne("BisnicityApp.Entites.Univircity", "Univircity")
                        .WithMany()
                        .HasForeignKey("UnivircityID");

                    b.Navigation("Educationlevel");

                    b.Navigation("Univircity");
                });

            modelBuilder.Entity("BisnicityApp.Entites.volunteer", b =>
                {
                    b.HasOne("BisnicityApp.Entites.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderID");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Infrastrucer.Models.ApplicationUser", b =>
                {
                    b.HasOne("BisnicityApp.Entites.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderID");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Infrastrucer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Infrastrucer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastrucer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Infrastrucer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
